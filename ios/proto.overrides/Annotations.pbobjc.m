// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/annotations.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "google/api/Annotations.pbobjc.h"
 #import "google/api/HTTP.pbobjc.h"
 #import <Protobuf/GPBDescriptor.h>
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - GPBDescriptorRoot
@implementation GPBDescriptorRoot
@end
#pragma mark - GPBDescriptorRoot_FileDescriptor
static GPBFileDescriptor *GPBDescriptorRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.protobuf"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - GPBMethodOptions
@implementation GPBMethodOptions
@dynamic hasDeprecated, deprecated;
@dynamic uninterpretedOptionArray, uninterpretedOptionArray_Count;
typedef struct GPBMethodOptions__storage_ {
  uint32_t _has_storage_[1];
  BOOL deprecated;
  NSMutableArray *uninterpretedOptionArray;
} GPBMethodOptions__storage_;
// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "deprecated",
        .number = GPBMethodOptions_FieldNumber_Deprecated,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasDefaultValue,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(GPBMethodOptions__storage_, deprecated),
        .dataTypeSpecific.className = NULL,
      },
      {
        .name = "uninterpretedOptionArray",
        .number = GPBMethodOptions_FieldNumber_UninterpretedOptionArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GPBMethodOptions__storage_, uninterpretedOptionArray),
        .dataTypeSpecific.className = GPBStringifySymbol(GPBUninterpretedOption),
      },
    };
    GPBDescriptor *localDescriptor =
    [GPBDescriptor allocDescriptorForClass: [GPBMethodOptions class]
                                 rootClass: [GPBDescriptorRoot class]
                                      file: GPBDescriptorRoot_FileDescriptor()
                                    fields: fields
                                fieldCount: sizeof(fields) / sizeof(GPBMessageFieldDescription)
                               storageSize: sizeof(GPBMethodOptions__storage_)
                                     flags: GPBDescriptorInitializationFlag_None];

    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}
@end

#pragma mark - GPBUninterpretedOption
@implementation GPBUninterpretedOption
@dynamic nameArray, nameArray_Count;
@dynamic hasIdentifierValue, identifierValue;
@dynamic hasPositiveIntValue, positiveIntValue;
@dynamic hasNegativeIntValue, negativeIntValue;
@dynamic hasDoubleValue, doubleValue;
@dynamic hasStringValue, stringValue;
@dynamic hasAggregateValue, aggregateValue;
typedef struct GPBUninterpretedOption__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *nameArray;
  NSString *identifierValue;
  NSData *stringValue;
  NSString *aggregateValue;
  uint64_t positiveIntValue;
  int64_t negativeIntValue;
  double doubleValue;
} GPBUninterpretedOption__storage_;
// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nameArray",
        .number = GPBUninterpretedOption_FieldNumber_NameArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GPBUninterpretedOption__storage_, nameArray),
        .dataTypeSpecific.className = GPBStringifySymbol(GPBUninterpretedOption_NamePart),
      },
      {
        .name = "identifierValue",
        .number = GPBUninterpretedOption_FieldNumber_IdentifierValue,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GPBUninterpretedOption__storage_, identifierValue),
        .dataTypeSpecific.className = NULL,
      },
      {
        .name = "positiveIntValue",
        .number = GPBUninterpretedOption_FieldNumber_PositiveIntValue,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
        .offset = offsetof(GPBUninterpretedOption__storage_, positiveIntValue),
        .dataTypeSpecific.className = NULL,
      },
      {
        .name = "negativeIntValue",
        .number = GPBUninterpretedOption_FieldNumber_NegativeIntValue,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(GPBUninterpretedOption__storage_, negativeIntValue),
        .dataTypeSpecific.className = NULL,
      },
      {
        .name = "doubleValue",
        .number = GPBUninterpretedOption_FieldNumber_DoubleValue,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
        .offset = offsetof(GPBUninterpretedOption__storage_, doubleValue),
        .dataTypeSpecific.className = NULL,
      },
      {
        .name = "stringValue",
        .number = GPBUninterpretedOption_FieldNumber_StringValue,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
        .offset = offsetof(GPBUninterpretedOption__storage_, stringValue),
        .dataTypeSpecific.className = NULL,
      },
      {
        .name = "aggregateValue",
        .number = GPBUninterpretedOption_FieldNumber_AggregateValue,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GPBUninterpretedOption__storage_, aggregateValue),
        .dataTypeSpecific.className = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
    [GPBDescriptor allocDescriptorForClass: [GPBUninterpretedOption class]
                                 rootClass: [GPBDescriptorRoot class]
                                      file: GPBDescriptorRoot_FileDescriptor()
                                    fields: fields
                                fieldCount: sizeof(fields) / sizeof(GPBMessageFieldDescription)
                               storageSize: sizeof(GPBUninterpretedOption__storage_)
                                     flags: GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}
@end
#pragma mark - GPBUninterpretedOption_NamePart
@implementation GPBUninterpretedOption_NamePart
@dynamic hasNamePart, namePart;
@dynamic hasIsExtension, isExtension;
typedef struct GPBUninterpretedOption_NamePart__storage_ {
  uint32_t _has_storage_[1];
  BOOL isExtension;
  NSString *namePart;
} GPBUninterpretedOption_NamePart__storage_;
// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "namePart",
        .number = GPBUninterpretedOption_NamePart_FieldNumber_NamePart,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GPBUninterpretedOption_NamePart__storage_, namePart),
        .dataTypeSpecific.className = NULL,
      },
      {
        .name = "isExtension",
        .number = GPBUninterpretedOption_NamePart_FieldNumber_IsExtension,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(GPBUninterpretedOption_NamePart__storage_, isExtension),
        .dataTypeSpecific.className = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
    [GPBDescriptor allocDescriptorForClass: [GPBUninterpretedOption_NamePart class]
                                 rootClass: [GPBDescriptorRoot class]
                                      file: GPBDescriptorRoot_FileDescriptor()
                                    fields: fields
                                fieldCount: sizeof(fields) / sizeof(GPBMessageFieldDescription)
                               storageSize: sizeof(GPBUninterpretedOption_NamePart__storage_)
                                     flags: GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}
@end

#pragma mark - AnnotationsRoot

@implementation AnnotationsRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    static GPBExtensionDescription descriptions[] = {
      {
        .defaultValue.valueMessage = nil,
        .singletonName = GPBStringifySymbol(AnnotationsRoot_HTTP),
        .extendedClass = GPBStringifySymbol(GPBMethodOptions),
        .messageOrGroupClassName = GPBStringifySymbol(HttpRule),
        .enumDescriptorFunc = NULL,
        .fieldNumber = 72295728,
        .dataType = GPBDataTypeMessage,
        .options = GPBExtensionNone,
      },
    };
    for (size_t i = 0; i < sizeof(descriptions) / sizeof(descriptions[0]); ++i) {
      GPBExtensionDescriptor *extension =
          [[GPBExtensionDescriptor alloc] initWithExtensionDescription:&descriptions[i]];
      [registry addExtension:extension];
      [self globallyRegisterExtension:extension];
      [extension release];
    }
    // None of the imports (direct or indirect) defined extensions, so no need to add
    // them to this registry.
  }
  return registry;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
